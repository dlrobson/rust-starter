name: Docker Build Image

# Runs on push to main when a Dockerfile is changed, or on pull request  when a Dockerfile is changed
on:
  workflow_call:
    # secrets:
    #   GHCR_TOKEN:
    #     required: true

    outputs:
      image-name:
        description: 'The name of the image to be built and pushed'
        value: ${{ jobs.build_image.outputs.image-name }}
  
jobs:
  build_image:
    name: Build and Publish Image
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image-tag.outputs.name }}
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Determines the target tag for the image. If the branch is main, the tag is latest. Otherwise, the tag is the PR-{PR number}
      - name: Determine tag
        id: image-tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then \
            echo "tag=latest" >> $GITHUB_OUTPUT; \
            echo "name=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT; \
          else \
            echo "tag=PR-${{ github.event.number }}" >> $GITHUB_OUTPUT; \
            echo "name=ghcr.io/${{ github.repository }}:PR-${{ github.event.number }}" >> $GITHUB_OUTPUT; \
          fi
      
      - uses: dorny/paths-filter@v3
        id: dependency-updates
        with:
          filters: |
            src:
              - 'dockerfiles/**'
              - 'Cargo.lock'
              - '.github/workflows/build-image.yml'

      - name: Docker metadata
        if: steps.dependency-updates.outputs.src == 'true'
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            ${{ steps.image-tag.outputs.tag }}

      - name: Set up QEMU
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/build.Dockerfile
          push: true
          annotations: |
            ${{ steps.metadata.outputs.annotations }}
          tags: |
            ${{ steps.metadata.outputs.tags }}
          labels: |
            ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ steps.image-tag.outputs.name }}
          cache-to: type=inline
      - uses: actions/delete-package-versions@v5
        with: 
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'

      # - name: Delete all containers from package without tags
      #   uses: Chizkiyahu/delete-untagged-ghcr-action@v4
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     repository_owner: ${{ github.repository_owner }}
      #     repository: ${{ github.repository }}
      #     package_name: ${{ inputs.image-name }}
      #     untagged_only: true
      #     owner_type: user
      #     # This needs to be false if you are using a multiplatform image
      #     # Otherwise, it will delete layers that will result in the 
      #     # `manifest unknown` error
      #     except_untagged_multiplatform: true
