name: Docker Build Image

# Runs on push to main when a Dockerfile is changed, or on pull request when a Dockerfile is changed.
on:
  workflow_call:
    outputs:
      name:
        description: 'The name of the image to be built and pushed'
        value: ${{ jobs.build-image.outputs.name }}
      tag:
        description: 'The tag of the image to be built and pushed'
        value: ${{ jobs.build-image.outputs.tag }}

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}-build-env
  PACKAGE_NAME: ${{ github.event.repository.name }}-build-env
  
jobs:
  build-image:
    name: Build and Publish Image
    runs-on: ubuntu-latest
    outputs:
      name: ${{ env.IMAGE_NAME }}
      tag: ${{ steps.job-output.outputs.tag }}
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Determines the target tag for the image. If the branch is main, the tag is latest. Otherwise, the tag is the PR-{PR number}
      - name: Set job output
        id: job-output
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then \
            echo "tag=latest" >> $GITHUB_OUTPUT; \
          else \
            echo "tag=PR-${{ github.event.number }}" >> $GITHUB_OUTPUT; \
          fi
      
      - uses: dorny/paths-filter@v3
        id: dependency-updates
        with:
          filters: |
            src:
              - 'dockerfiles/**'
              - 'Cargo.lock'
              - '.github/workflows/build-image.yml'

      - name: Docker metadata
        if: steps.dependency-updates.outputs.src == 'true'
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.job-output.outputs.tag }}

      - name: Set up QEMU
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        if: steps.dependency-updates.outputs.src == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/build.Dockerfile
          push: true
          annotations: |
            ${{ steps.metadata.outputs.annotations }}
          tags: |
            ${{ steps.metadata.outputs.tags }}
          labels: |
            ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:${{ steps.job-output.outputs.tag }}
          cache-to: type=inline

      # When tags are overwritten, the old tags are not removed from the registry.
      # This action removes the old tags. This also handles multi-arch manifests, and
      # does not delete untagged images linked to the manifest.
      - uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          package: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
